
import numpy as np
# from scipy.optimize import leastsq
from astropy.coordinates import Distance, Angle, SkyCoord
from astropy import units as u
import numpy.linalg as la
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


def rho_phi(coord, glx_ctr):
    # Angular distance between point and center of galaxy.
    rho = coord.separation(glx_ctr)
    # Position angle between center and coordinates. This is the angle between
    # the positive y axis (North) counter-clockwise towards the negative x
    # axis (East).
    Phi = glx_ctr.position_angle(coord)
    # This is the angle measured counter-clockwise from the x positive axis
    # (West).
    phi = Phi + Angle('90d')
    return rho, phi


def xyz_p_coords(rho, phi, D_0, r_dist):
    '''
    '''
    d_kpc = Distance((10**(0.2*(r_dist + 5.)))/1000., unit=u.kpc)

    x_p = d_kpc * np.sin(rho.radian) * np.cos(phi.radian)
    y_p = d_kpc * np.sin(rho.radian) * np.sin(phi.radian)
    z_p = D_0 - d_kpc*np.cos(rho.radian)
    x_p, y_p, z_p = x_p.value, y_p.value, z_p.value
    coords = np.asarray(zip(*[x_p, y_p, z_p]))

    return coords


def mvee(points, tol=0.001):
    """
    Find the minimum volume ellipse.
    Return A, c where the equation for the ellipse given in "center form" is
    (x-c).T * A * (x-c) = 1

    http://stackoverflow.com/a/14025140/1391441
    """
    points = np.asmatrix(points)
    N, d = points.shape
    Q = np.column_stack((points, np.ones(N))).T
    err = tol+1.0
    u = np.ones(N)/N
    while err > tol:
        # assert u.sum() == 1 # invariant
        X = Q * np.diag(u) * Q.T
        M = np.diag(Q.T * la.inv(X) * Q)
        jdx = np.argmax(M)
        step_size = (M[jdx]-d-1.0)/((d+1)*(M[jdx]-1.0))
        new_u = (1-step_size)*u
        new_u[jdx] += step_size
        err = la.norm(new_u-u)
        u = new_u
    c = u*points
    A = la.inv(points.T*np.diag(u)*points - c.T*c)/d
    return np.asarray(A), np.squeeze(np.asarray(c))


def ellipse(rx, ry, rz, u, v):
    x = rx*np.cos(u)*np.cos(v)
    y = ry*np.sin(u)*np.cos(v)
    z = rz*np.sin(v)
    return x, y, z


def get_ellipse(rho, phi, D_0, dm_g, e_dm_g):
    """
    See: http://stackoverflow.com/a/14025140/1391441
    """
    N_ran = 2
    ellip_matrix, centers = [], []
    for _ in range(N_ran):
        print _
        # Random draw.
        # r_dist = np.random.normal(np.asarray(dm_g), np.asarray(e_dm_g))
        r_dist = np.asarray(dm_g)
        coords = xyz_p_coords(rho, phi, D_0, r_dist)
        # A : (d x d) matrix of the ellipse equation in the 'center form':
        # (x-c)' * A * (x-c) = 1
        # 'centroid' is the center coordinates of the ellipse.
        A, centroid = mvee(coords)
        ellip_matrix.append(A)
        centers.append(centroid)

    A = np.mean(ellip_matrix, axis=0)
    centroid = np.mean(centers, axis=0)
    print A
    print centroid

    # V is the rotation matrix that gives the orientation of the ellipsoid.
    # https://en.wikipedia.org/wiki/Rotation_matrix
    # http://mathworld.wolfram.com/RotationMatrix.html
    U, D, V = la.svd(A)

    # x, y, z radii.
    rx, ry, rz = 1./np.sqrt(D)
    print 'rads', rx/2., ry/2., rz/2.

    u_small, v_small = np.mgrid[0:2*np.pi:20j, -np.pi/2:np.pi/2:10j]
    E = np.dstack(ellipse(rx, ry, rz, u_small, v_small))
    E = np.dot(E, V) + centroid
    x_e, y_e, z_e = np.rollaxis(E, axis=-1)

    return x_e, y_e, z_e


def inv_trans_eqs(x_p, y_p, z_p, theta, inc):
    """
    Inverse set of equations. Transform inclined plane system (x', y', z')
    into face on sky system (x, y, z).
    """
    x = x_p*np.cos(theta.radian) -\
        y_p*np.cos(inc.radian)*np.sin(theta.radian) -\
        z_p*np.sin(inc.radian)*np.sin(theta.radian)
    y = x_p*np.sin(theta.radian) +\
        y_p*np.cos(inc.radian)*np.cos(theta.radian) +\
        z_p*np.sin(inc.radian)*np.cos(theta.radian)
    z = -1.*y_p*np.sin(inc.radian) + z_p*np.cos(inc.radian)

    return x, y, z


def make_plot(rho, phi, D_0, inc, theta, dm, x_e, y_e, z_e):
    """
    Original link for plotting intersecting planes:
    http://stackoverflow.com/a/14825951/1391441
    """
    # Make plot.
    fig = plt.figure()
    ax = Axes3D(fig)

    # Plot ellipse.
    ax.plot_surface(x_e, z_e, y_e, cstride=1, rstride=1, alpha=0.05)

    # Plot coords with no random displacement.
    coords = xyz_p_coords(rho, phi, D_0, np.asarray(dm))
    ax.scatter(coords[:, 0], coords[:, 2], coords[:, 1])

    # Plot x,y plane.
    dim = 5
    X, Y = np.meshgrid([-dim, dim], [-dim, dim])
    Z = np.zeros((2, 2))

    print 'inc, theta:', glx_inc, theta
    # A plane is a*x+b*y+c*z+d=0, [a,b,c] is the normal.
    a, b, c = -1.*np.sin(theta.radian)*np.sin(inc.radian),\
        np.cos(theta.radian)*np.sin(inc.radian),\
        np.cos(inc.radian)

    X2, Y2 = np.meshgrid([-dim, dim], [0, dim])
    Z2 = (-a*X2 - b*Y2) / c
    X3, Y3 = np.meshgrid([-dim, dim], [-dim, 0])
    Z3 = (-a*X3 - b*Y3) / c

    # x,y plane.
    ax.plot_surface(X, Z, Y, color='gray', alpha=.2, linewidth=0, zorder=1)
    # Top half of inclined plane.
    ax.plot_surface(X2, Z2, Y2, color='red', alpha=.2, linewidth=0, zorder=3)
    # Bottom half of inclined plane.
    ax.plot_surface(X2, Z3, Y3, color='red', alpha=.2, linewidth=0, zorder=-1)

    ax_min, ax_max = -1.*dim, dim
    # x,y plane, x axis.
    ax.plot([ax_min, ax_max], [0., 0.], [0., 0.], ls='--', c='k', zorder=4)
    # Arrow head pointing in the positive x direction.
    ax.quiver(ax_max, 0., 0., ax_max, 0., 0., length=0.3,
              arrow_length_ratio=1., color='k')
    # x,y plane, y axis.
    ax.plot([0., 0.], [0., 0.], [0., ax_max], ls='--', c='k')
    # Arrow head pointing in the positive y direction.
    ax.quiver(0., 0., ax_max, 0., 0., ax_max, length=0.3,
              arrow_length_ratio=1., color='k')
    ax.plot([0., 0.], [0., 0.], [ax_min, 0.], ls='--', c='k')

    # x',y' plane, x' axis.
    x_min, y_min, z_min = inv_trans_eqs(-1.*dim, 0., 0., theta, inc)
    x_max, y_max, z_max = inv_trans_eqs(dim, 0., 0., theta, inc)
    ax.plot([x_min, x_max], [z_min, z_max], [y_min, y_max], ls='--', c='b')
    # Arrow head pointing in the positive x' direction.
    ax.quiver(x_max, z_max, y_max, x_max, z_max, y_max, length=0.3,
              arrow_length_ratio=1.)
    # x',y' plane, y' axis.
    x_min, y_min, z_min = inv_trans_eqs(0., -1.*dim, 0., theta, inc)
    x_max, y_max, z_max = inv_trans_eqs(0., dim, 0., theta, inc)
    ax.plot([x_min, x_max], [z_min, z_max], [y_min, y_max], ls='--', c='g')
    # Arrow head pointing in the positive y' direction.
    ax.quiver(x_max, z_max, y_max, x_max, z_max, y_max, length=0.3,
              arrow_length_ratio=1., color='g')

    ax.set_xlabel('x (Kpc)')
    ax.set_xlim(ax_min, ax_max)
    ax.set_ylabel('z (Kpc)')
    ax.set_ylim(ax_max, ax_min)
    ax.set_zlabel('y (Kpc)')
    ax.set_zlim(ax_min, ax_max)
    ax.set_aspect('equal')

    plt.show()


def plot_bulge_plane(ra_g, dec_g, dm_g, e_dm_g, D_0, gal_cent, glx_inc, theta):
    """
    """

    coords = SkyCoord(zip(*[ra_g, dec_g]), unit=(u.deg, u.deg))
    rho, phi = rho_phi(coords, gal_cent)

    x_e, y_e, z_e = get_ellipse(rho, phi, D_0, dm_g, e_dm_g)

    make_plot(rho, phi, D_0, glx_inc, theta, dm_g, x_e, y_e, z_e)


if __name__ == "__main__":

    j = 1
    if j == 0:
        # SMC
        # # rho < 1.5
        # ra_g = [15.5958333333333, 12.1375, 10.9333333333333, 17.225, 15.1416666666667, 15.0041666666667, 14.3416666666667, 13.5625, 11.3583333333333, 16.0916666666667, 14.4583333333333, 16.8333333333333, 13.3541666666667, 11.6833333333333, 17.5541666666667, 11.8, 15.2833333333333, 11.475, 14.45, 13.275, 11.2166666666667, 13.1458333333333, 10.7458333333333, 13.8875, 15.9708333333333, 18.2125, 10.35, 17.0791666666667, 15.1458333333333, 11.9583333333333, 12.3625, 17.6958333333333, 15.2333333333333, 11.5041666666667, 14.325, 15.2041666666667, 17.0583333333333, 14.0583333333333, 16.8791666666667, 16.7375, 13.6291666666667, 12.5875, 15.35, 17.2583333333333, 12.325, 15.1375, 10.8875, 12.1541666666667, 11.775, 16.2583333333333, 11.7291666666667, 10.9083333333333, 12.05, 11.8541666666667, 12.0041666666667, 15.7958333333333, 17.2541666666667, 15.0583333333333]
        # dec_g = [-72.0030555555556, -73.3069444444444, -72.9766666666667, -73.2416666666667, -72.3655555555556, -72.3688888888889, -71.8913888888889, -72.2413888888889, -73.4813888888889, -72.8477777777778, -72.9436111111111, -73.3775, -72.1963888888889, -72.0630555555556, -73.2091666666667, -73.4772222222222, -74.0736111111111, -73.5066666666667, -73.4216666666667, -73.3802777777778, -73.0019444444445, -72.1930555555556, -72.5886111111111, -74.0636111111111, -72.8261111111111, -73.1194444444444, -72.8908333333333, -72.8841666666667, -71.4608333333333, -73.4783333333333, -73.3980555555556, -72.7919444444444, -73.1516666666667, -73.3955555555556, -72.9327777777778, -73.3488888888889, -73.2569444444444, -74.1561111111111, -73.1197222222222, -73.235, -74.1852777777778, -73.3872222222222, -73.2402777777778, -73.0863888888889, -73.3716666666667, -72.2583333333333, -73.4388888888889, -73.4155555555556, -73.3730555555556, -73.0427777777778, -73.4233333333333, -73.4405555555556, -73.4463888888889, -73.4580555555556, -73.4861111111111, -72.2736111111111, -73.2066666666667, -72.4583333333333]
        # dm = [18.92, 18.88, 19.04, 18.98, 18.88, 18.96, 18.94, 18.9, 18.96, 19.06, 19.04, 19.04, 18.9, 18.98, 18.88, 18.92, 18.94, 18.98, 18.98, 19.0, 19.04, 18.98, 19.06, 18.94, 18.9, 19.0, 18.98, 18.92, 18.94, 19.06, 19.04, 18.94, 19.06, 18.9, 18.98, 18.88, 18.94, 19.04, 18.92, 18.88, 18.88, 18.9, 18.88, 18.96, 18.96, 19.02, 18.88, 18.9, 18.9, 18.94, 19.04, 18.94, 18.9, 18.88, 18.88, 18.94, 18.96, 18.96]
        # rho < 1.
        # ra_g = [12.1375, 10.9333333333333, 15.1416666666667, 15.0041666666667, 13.5625, 11.3583333333333, 16.0916666666667, 14.4583333333333, 13.3541666666667, 11.6833333333333, 11.8, 11.475, 14.45, 13.275, 11.2166666666667, 13.1458333333333, 10.7458333333333, 15.9708333333333, 10.35, 11.9583333333333, 12.3625, 15.2333333333333, 11.5041666666667, 14.325, 15.2041666666667, 12.5875, 15.35, 12.325, 15.1375, 10.8875, 12.1541666666667, 11.775, 16.2583333333333, 11.7291666666667, 10.9083333333333, 12.05, 11.8541666666667, 12.0041666666667, 15.7958333333333, 15.0583333333333]
        # dec_g = [-73.3069444444444, -72.9766666666667, -72.3655555555556, -72.3688888888889, -72.2413888888889, -73.4813888888889, -72.8477777777778, -72.9436111111111, -72.1963888888889, -72.0630555555556, -73.4772222222222, -73.5066666666667, -73.4216666666667, -73.3802777777778, -73.0019444444445, -72.1930555555556, -72.5886111111111, -72.8261111111111, -72.8908333333333, -73.4783333333333, -73.3980555555556, -73.1516666666667, -73.3955555555556, -72.9327777777778, -73.3488888888889, -73.3872222222222, -73.2402777777778, -73.3716666666667, -72.2583333333333, -73.4388888888889, -73.4155555555556, -73.3730555555556, -73.0427777777778, -73.4233333333333, -73.4405555555556, -73.4463888888889, -73.4580555555556, -73.4861111111111, -72.2736111111111, -72.4583333333333]
        # dm = [18.88, 19.04, 18.88, 18.96, 18.9, 18.96, 19.06, 19.04, 18.9, 18.98, 18.92, 18.98, 18.98, 19.0, 19.04, 18.98, 19.06, 18.9, 18.98, 19.06, 19.04, 19.06, 18.9, 18.98, 18.88, 18.9, 18.88, 18.96, 19.02, 18.88, 18.9, 18.9, 18.94, 19.04, 18.94, 18.9, 18.88, 18.88, 18.94, 18.96]
        # e_dm=[0.05, 0.06, 0.03, 0.05, 0.05, 0.06, 0.06, 0.05, 0.07, 0.05, 0.05, 0.05, 0.05, 0.04, 0.05, 0.06, 0.04, 0.06, 0.06, 0.05, 0.06, 0.04, 0.05, 0.05, 0.04, 0.04, 0.06, 0.03, 0.07, 0.07, 0.06, 0.04, 0.06, 0.06, 0.05, 0.07, 0.06, 0.06, 0.03, 0.06]
        # rho > 1.
        # ra_g=[15.5958333333333, 17.225, 14.3416666666667, 357.245833333333, 15.1041666666667, 16.8333333333333, 22.6583333333333, 9.425, 18.875, 18.2583333333333, 24.0041666666667, 23.75, 23.3083333333333, 17.5541666666667, 25.4291666666667, 4.60416666666667, 19.5666666666667, 25.5916666666667, 15.2833333333333, 21.2333333333333, 29.1833333333333, 18.0166666666667, 5.66666666666667, 22.8833333333333, 14.4458333333333, 25.6166666666667, 13.8875, 14.425, 6.17916666666667, 20.7, 18.2125, 27.3666666666667, 5.3625, 23.6083333333333, 5.76666666666667, 17.0791666666667, 15.1458333333333, 27.5791666666667, 16.0166666666667, 17.6958333333333, 15.4916666666667, 17.0583333333333, 14.0583333333333, 16.8791666666667, 16.7375, 13.6291666666667, 14.3333333333333, 17.2583333333333, 17.2541666666667]
        # dec_g=[-72.0030555555556, -73.2416666666667, -71.8913888888889, -72.9452777777778, -71.2947222222222, -73.3775, -76.0544444444444, -73.9083333333333, -71.1788888888889, -70.9627777777778, -75.4577777777778, -75.5566666666667, -74.1672222222222, -73.2091666666667, -71.1611111111111, -74.3186111111111, -72.0016666666667, -74.1733333333333, -74.0736111111111, -71.1836111111111, -74.2194444444445, -75.1975, -75.0747222222222, -71.9527777777778, -74.3266666666667, -71.2791666666667, -74.0636111111111, -74.4727777777778, -73.755, -75.0016666666667, -73.1194444444444, -73.7283333333333, -73.7486111111111, -72.8744444444444, -73.6697222222222, -72.8841666666667, -71.4608333333333, -74.3561111111111, -74.6191666666667, -72.7919444444444, -71.0202777777778, -73.2569444444444, -74.1561111111111, -73.1197222222222, -73.235, -74.1852777777778, -71.1702777777778, -73.0863888888889, -73.2066666666667]
        # dm=[18.92, 18.98, 18.94, 19.06, 19.0, 19.04, 18.88, 18.9, 19.02, 18.98, 19.0, 18.88, 19.0, 18.88, 18.94, 18.98, 18.86, 19.02, 18.94, 19.04, 18.96, 19.04, 18.86, 18.88, 18.98, 19.0, 18.94, 19.0, 19.02, 19.02, 19.0, 19.02, 18.96, 18.96, 18.96, 18.92, 18.94, 18.96, 18.96, 18.94, 18.92, 18.94, 19.04, 18.92, 18.88, 18.88, 18.94, 18.96, 18.96]
        # e_dm=[0.05, 0.07, 0.06, 0.05, 0.07, 0.04, 0.06, 0.04, 0.05, 0.06, 0.05, 0.07, 0.07, 0.06, 0.06, 0.05, 0.07, 0.05, 0.06, 0.04, 0.06, 0.04, 0.06, 0.05, 0.06, 0.07, 0.03, 0.05, 0.04, 0.05, 0.05, 0.05, 0.06, 0.04, 0.06, 0.05, 0.05, 0.06, 0.03, 0.04, 0.06, 0.05, 0.06, 0.04, 0.06, 0.05, 0.04, 0.04, 0.05]
        # ALL
        ra_g=[15.5958333333333, 12.1375, 10.9333333333333, 17.225, 15.1416666666667, 15.0041666666667, 14.3416666666667, 13.5625, 357.245833333333, 15.1041666666667, 11.3583333333333, 16.0916666666667, 14.4583333333333, 16.8333333333333, 22.6583333333333, 9.425, 18.875, 18.2583333333333, 13.3541666666667, 24.0041666666667, 11.6833333333333, 23.75, 23.3083333333333, 17.5541666666667, 25.4291666666667, 4.60416666666667, 19.5666666666667, 25.5916666666667, 11.8, 15.2833333333333, 21.2333333333333, 11.475, 29.1833333333333, 18.0166666666667, 5.66666666666667, 14.45, 22.8833333333333, 14.4458333333333, 13.275, 25.6166666666667, 11.2166666666667, 13.1458333333333, 10.7458333333333, 13.8875, 15.9708333333333, 14.425, 6.17916666666667, 20.7, 18.2125, 27.3666666666667, 5.3625, 10.35, 23.6083333333333, 5.76666666666667, 17.0791666666667, 15.1458333333333, 27.5791666666667, 11.9583333333333, 16.0166666666667, 12.3625, 17.6958333333333, 15.2333333333333, 15.4916666666667, 11.5041666666667, 14.325, 15.2041666666667, 17.0583333333333, 14.0583333333333, 16.8791666666667, 16.7375, 13.6291666666667, 12.5875, 14.3333333333333, 15.35, 17.2583333333333, 12.325, 15.1375, 10.8875, 12.1541666666667, 11.775, 16.2583333333333, 11.7291666666667, 10.9083333333333, 12.05, 11.8541666666667, 12.0041666666667, 15.7958333333333, 17.2541666666667, 15.0583333333333]
        dec_g=[-72.0030555555556, -73.3069444444444, -72.9766666666667, -73.2416666666667, -72.3655555555556, -72.3688888888889, -71.8913888888889, -72.2413888888889, -72.9452777777778, -71.2947222222222, -73.4813888888889, -72.8477777777778, -72.9436111111111, -73.3775, -76.0544444444444, -73.9083333333333, -71.1788888888889, -70.9627777777778, -72.1963888888889, -75.4577777777778, -72.0630555555556, -75.5566666666667, -74.1672222222222, -73.2091666666667, -71.1611111111111, -74.3186111111111, -72.0016666666667, -74.1733333333333, -73.4772222222222, -74.0736111111111, -71.1836111111111, -73.5066666666667, -74.2194444444445, -75.1975, -75.0747222222222, -73.4216666666667, -71.9527777777778, -74.3266666666667, -73.3802777777778, -71.2791666666667, -73.0019444444445, -72.1930555555556, -72.5886111111111, -74.0636111111111, -72.8261111111111, -74.4727777777778, -73.755, -75.0016666666667, -73.1194444444444, -73.7283333333333, -73.7486111111111, -72.8908333333333, -72.8744444444444, -73.6697222222222, -72.8841666666667, -71.4608333333333, -74.3561111111111, -73.4783333333333, -74.6191666666667, -73.3980555555556, -72.7919444444444, -73.1516666666667, -71.0202777777778, -73.3955555555556, -72.9327777777778, -73.3488888888889, -73.2569444444444, -74.1561111111111, -73.1197222222222, -73.235, -74.1852777777778, -73.3872222222222, -71.1702777777778, -73.2402777777778, -73.0863888888889, -73.3716666666667, -72.2583333333333, -73.4388888888889, -73.4155555555556, -73.3730555555556, -73.0427777777778, -73.4233333333333, -73.4405555555556, -73.4463888888889, -73.4580555555556, -73.4861111111111, -72.2736111111111, -73.2066666666667, -72.4583333333333]
        dm=[18.92, 18.88, 19.04, 18.98, 18.88, 18.96, 18.94, 18.9, 19.06, 19.0, 18.96, 19.06, 19.04, 19.04, 18.88, 18.9, 19.02, 18.98, 18.9, 19.0, 18.98, 18.88, 19.0, 18.88, 18.94, 18.98, 18.86, 19.02, 18.92, 18.94, 19.04, 18.98, 18.96, 19.04, 18.86, 18.98, 18.88, 18.98, 19.0, 19.0, 19.04, 18.98, 19.06, 18.94, 18.9, 19.0, 19.02, 19.02, 19.0, 19.02, 18.96, 18.98, 18.96, 18.96, 18.92, 18.94, 18.96, 19.06, 18.96, 19.04, 18.94, 19.06, 18.92, 18.9, 18.98, 18.88, 18.94, 19.04, 18.92, 18.88, 18.88, 18.9, 18.94, 18.88, 18.96, 18.96, 19.02, 18.88, 18.9, 18.9, 18.94, 19.04, 18.94, 18.9, 18.88, 18.88, 18.94, 18.96, 18.96]
        e_dm=[0.05, 0.05, 0.06, 0.07, 0.03, 0.05, 0.06, 0.05, 0.05, 0.07, 0.06, 0.06, 0.05, 0.04, 0.06, 0.04, 0.05, 0.06, 0.07, 0.05, 0.05, 0.07, 0.07, 0.06, 0.06, 0.05, 0.07, 0.05, 0.05, 0.06, 0.04, 0.05, 0.06, 0.04, 0.06, 0.05, 0.05, 0.06, 0.04, 0.07, 0.05, 0.06, 0.04, 0.03, 0.06, 0.05, 0.04, 0.05, 0.05, 0.05, 0.06, 0.06, 0.04, 0.06, 0.05, 0.05, 0.06, 0.05, 0.03, 0.06, 0.04, 0.04, 0.06, 0.05, 0.05, 0.04, 0.05, 0.06, 0.04, 0.06, 0.05, 0.04, 0.04, 0.06, 0.04, 0.03, 0.07, 0.07, 0.06, 0.04, 0.06, 0.06, 0.05, 0.07, 0.06, 0.06, 0.03, 0.05, 0.06]
        # SMC central coords stored in degrees.
        c_SMC = SkyCoord('00h52m45s', '-72d49m43s', frame='icrs')
        d_SMC = Distance((10**(0.2*(18.96 + 5))/1000.), unit=u.kpc)
        D_0, gal_cent = d_SMC, c_SMC
        glx_inc, glx_PA = Angle('41.d'), Angle('108.d')
        theta = glx_PA + Angle('90d')
    else:
        # LMC
        # # rho < 1.5
        # ra_g = [78.8541666666667, 78.8125, 77.3, 77.625, 78.9458333333333, 79.7583333333333, 78.1041666666667, 79.5208333333333, 79.4541666666667, 79.1666666666667, 80.05, 77.65, 79.2333333333333, 79.2208333333333, 79.0708333333333, 77.9166666666667, 80.4375, 79.6708333333333, 77.6666666666667, 82.3333333333333, 79.1125, 80.0083333333333, 80.8]
        # dec_g = [-68.6811111111111, -68.8825, -68.4441666666667, -68.4005555555556, -69.1919444444445, -69.0011111111111, -68.7719444444444, -69.1716666666667, -68.4727777777778, -70.5408333333333, -68.9041666666667, -70.4875, -68.6827777777778, -69.15, -69.1541666666667, -68.7266666666667, -68.9172222222222, -69.0794444444444, -68.7536111111111, -70.5794444444445, -69.0802777777778, -69.2611111111111, -70.7777777777778]
        # dm = [18.44, 18.48, 18.42, 18.42, 18.6, 18.48, 18.42, 18.52, 18.58, 18.56, 18.52, 18.5, 18.6, 18.54, 18.52, 18.44, 18.4, 18.44, 18.58, 18.54, 18.6, 18.58, 18.42]
        # rho < 1.
        # ra_g=[78.8541666666667, 78.8125, 78.9458333333333, 79.7583333333333, 79.5208333333333, 80.05, 79.2333333333333, 79.2208333333333, 79.0708333333333, 80.4375, 79.6708333333333, 79.1125, 80.0083333333333]
        # dec_g=[-68.6811111111111, -68.8825, -69.1919444444445, -69.0011111111111, -69.1716666666667, -68.9041666666667, -68.6827777777778, -69.15, -69.1541666666667, -68.9172222222222, -69.0794444444444, -69.0802777777778, -69.2611111111111]
        # dm=[18.44, 18.48, 18.6, 18.48, 18.52, 18.52, 18.6, 18.54, 18.52, 18.4, 18.44, 18.6, 18.58]
        # e_dm=[0.05, 0.07, 0.05, 0.04, 0.06, 0.06, 0.04, 0.06, 0.07, 0.05, 0.03, 0.06, 0.05]
        # ALL
        ra_g=[76.4166666666667, 74.225, 82.9916666666667, 78.8541666666667, 76.1416666666667, 88.0458333333333, 72.3083333333333, 76.5083333333333, 78.8125, 87.7, 76.9458333333333, 77.3, 76.1375, 77.2208333333333, 73.9208333333333, 86.4583333333333, 76.9833333333333, 83.3333333333333, 72.7958333333333, 77.7333333333333, 86.0458333333333, 72.2791666666667, 72.5875, 77.625, 86.7166666666667, 71.8583333333333, 72.6208333333333, 78.9458333333333, 76.975, 74.725, 86.7125, 73.7625, 72.25, 94.3291666666667, 76.5375, 91.8708333333333, 74.5583333333333, 93.4833333333333, 72.1541666666667, 70.8083333333333, 73.4625, 79.7583333333333, 76.55, 82.9416666666667, 74.5416666666667, 76.9416666666667, 78.1041666666667, 74.3916666666667, 76.6416666666667, 85.9833333333333, 81.55, 74.9416666666667, 69.925, 79.5208333333333, 82.6416666666667, 74.9083333333333, 82.2083333333333, 95.3916666666667, 79.4541666666667, 67.6666666666667, 77.7958333333333, 85.375, 77.3958333333333, 76.4708333333333, 69.4125, 76.5125, 74.8083333333333, 76.6041666666667, 85.8958333333333, 82.4833333333333, 79.1666666666667, 77.7875, 78.45, 76.125, 82.925, 73.1875, 82.85, 72.7, 92.2208333333333, 93.9875, 88.8958333333333, 85.8333333333333, 74.1208333333333, 84.7833333333333, 80.05, 72.4125, 73.55, 71.5166666666667, 77.3458333333333, 77.9208333333333, 77.65, 81.3625, 74.7125, 81.1166666666667, 79.2333333333333, 81.125, 68.9083333333333, 93.6166666666667, 91.6291666666667, 74.3583333333333, 73.7541666666667, 83.0125, 86.55, 93.6708333333333, 74.9708333333333, 76.8958333333333, 79.2208333333333, 79.0708333333333, 77.9166666666667, 82.4416666666667, 77.3125, 83.2541666666667, 77.5083333333333, 83.6625, 74.5625, 80.4375, 79.6708333333333, 85.4916666666667, 71.6041666666667, 73.225, 76.9041666666667, 76.4, 86.4833333333333, 85.1083333333333, 77.6666666666667, 74.5916666666667, 77.7208333333333, 73.9666666666667, 82.3333333333333, 85.4541666666667, 77.6333333333333, 79.1125, 80.0083333333333, 71.875, 88.925, 85.6208333333333, 84.4416666666667, 86.3625, 80.8, 83.0958333333333, 77.2125, 82.9625, 76.8375, 76.6708333333333, 83.5541666666667, 82.4958333333333, 85.4125, 82.4125, 76.3541666666667, 76.6416666666667]
        dec_g=[-68.6394444444445, -68.0022222222222, -67.9716666666667, -68.6811111111111, -68.2083333333333, -71.8583333333333, -72.0566666666667, -68.0263888888889, -68.8825, -71.7077777777778, -66.7980555555556, -68.4441666666667, -67.9755555555556, -68.0836111111111, -67.7833333333333, -69.3802777777778, -67.3577777777778, -68.1522222222222, -67.5347222222222, -67.6266666666667, -69.3333333333333, -67.3416666666667, -72.8275, -68.4005555555556, -69.1897222222222, -67.6597222222222, -67.3258333333333, -69.1919444444445, -67.9288888888889, -67.8469444444445, -69.4197222222222, -67.9644444444444, -72.64, -70.0608333333333, -68.4458333333333, -72.4941666666667, -67.7683333333333, -72.5052777777778, -68.5594444444444, -73.8119444444444, -69.5719444444444, -69.0011111111111, -68.0630555555556, -68.2355555555556, -68.0602777777778, -67.8613888888889, -68.7719444444444, -65.2677777777778, -68.3630555555556, -69.1805555555556, -70.9813888888889, -69.8011111111111, -74.0172222222222, -69.1716666666667, -63.2033333333333, -69.5575, -71.6327777777778, -72.79, -68.4727777777778, -66.9569444444444, -67.6266666666667, -69.185, -67.8105555555556, -67.0494444444445, -66.1994444444444, -68.6283333333333, -67.9083333333333, -68.375, -66.2086111111111, -72.0547222222222, -70.5408333333333, -67.6825, -66.62, -68.3497222222222, -72.1461111111111, -72.5177777777778, -72.0425, -72.5766666666667, -72.3838888888889, -70.0730555555556, -62.3452777777778, -66.2622222222222, -67.6227777777778, -74.8533333333333, -68.9041666666667, -72.2480555555556, -69.8069444444444, -66.9113888888889, -67.7783333333333, -67.5655555555556, -70.4875, -73.5702777777778, -69.9577777777778, -67.7286111111111, -68.6827777777778, -67.6780555555556, -73.7316666666667, -72.6094444444445, -72.2263888888889, -67.6852777777778, -67.7141666666667, -64.2422222222222, -69.0825, -69.8019444444445, -67.9236111111111, -67.4608333333333, -69.15, -69.1541666666667, -68.7266666666667, -71.0005555555556, -67.6997222222222, -67.8491666666667, -66.6991666666667, -68.3055555555556, -68.0491666666667, -68.9172222222222, -69.0794444444444, -69.0475, -72.5683333333333, -72.1725, -68.5419444444444, -68.6286111111111, -69.2719444444444, -69.2486111111111, -68.7536111111111, -69.8030555555556, -67.4711111111111, -69.7058333333333, -70.5794444444445, -68.9208333333333, -66.94, -69.0802777777778, -69.2611111111111, -72.5883333333333, -74.3538888888889, -65.3627777777778, -74.7827777777778, -69.3452777777778, -70.7777777777778, -67.9969444444444, -67.9802777777778, -67.9911111111111, -66.8291666666667, -67.8422222222222, -67.8563888888889, -67.8788888888889, -69.2294444444444, -70.9838888888889, -68.5005555555556, -68.4272222222222]
        dm=[18.42, 18.54, 18.44, 18.44, 18.56, 18.54, 18.48, 18.46, 18.48, 18.54, 18.56, 18.42, 18.42, 18.48, 18.44, 18.58, 18.48, 18.44, 18.52, 18.52, 18.58, 18.52, 18.42, 18.42, 18.54, 18.44, 18.48, 18.6, 18.44, 18.54, 18.48, 18.56, 18.52, 18.42, 18.44, 18.44, 18.48, 18.52, 18.48, 18.44, 18.56, 18.48, 18.5, 18.6, 18.56, 18.46, 18.42, 18.46, 18.48, 18.48, 18.58, 18.48, 18.6, 18.52, 18.44, 18.42, 18.6, 18.44, 18.58, 18.54, 18.52, 18.5, 18.58, 18.5, 18.5, 18.48, 18.5, 18.42, 18.52, 18.48, 18.56, 18.5, 18.52, 18.46, 18.52, 18.58, 18.52, 18.5, 18.5, 18.5, 18.42, 18.52, 18.5, 18.5, 18.52, 18.6, 18.6, 18.44, 18.5, 18.54, 18.5, 18.42, 18.52, 18.48, 18.6, 18.52, 18.5, 18.48, 18.44, 18.56, 18.56, 18.46, 18.54, 18.44, 18.5, 18.5, 18.54, 18.52, 18.44, 18.58, 18.5, 18.42, 18.54, 18.42, 18.44, 18.4, 18.44, 18.44, 18.48, 18.56, 18.6, 18.42, 18.42, 18.4, 18.58, 18.58, 18.48, 18.42, 18.54, 18.48, 18.5, 18.6, 18.58, 18.48, 18.5, 18.6, 18.5, 18.48, 18.42, 18.44, 18.4, 18.5, 18.56, 18.48, 18.5, 18.56, 18.44, 18.42, 18.48, 18.54]
        e_dm=[0.05, 0.05, 0.06, 0.05, 0.06, 0.07, 0.06, 0.04, 0.07, 0.05, 0.06, 0.04, 0.06, 0.05, 0.06, 0.06, 0.05, 0.06, 0.05, 0.06, 0.04, 0.05, 0.05, 0.06, 0.06, 0.05, 0.04, 0.05, 0.06, 0.06, 0.05, 0.03, 0.05, 0.06, 0.06, 0.03, 0.05, 0.06, 0.06, 0.06, 0.05, 0.04, 0.07, 0.04, 0.06, 0.03, 0.06, 0.06, 0.04, 0.06, 0.04, 0.05, 0.04, 0.06, 0.04, 0.06, 0.06, 0.03, 0.07, 0.07, 0.07, 0.05, 0.06, 0.03, 0.04, 0.06, 0.06, 0.06, 0.05, 0.06, 0.06, 0.06, 0.06, 0.04, 0.04, 0.06, 0.06, 0.06, 0.04, 0.06, 0.05, 0.05, 0.06, 0.05, 0.06, 0.06, 0.06, 0.05, 0.05, 0.07, 0.05, 0.07, 0.06, 0.05, 0.04, 0.07, 0.05, 0.07, 0.05, 0.06, 0.03, 0.05, 0.06, 0.05, 0.05, 0.06, 0.06, 0.07, 0.03, 0.04, 0.06, 0.05, 0.07, 0.06, 0.04, 0.05, 0.03, 0.04, 0.04, 0.07, 0.04, 0.07, 0.06, 0.02, 0.05, 0.06, 0.06, 0.04, 0.06, 0.04, 0.06, 0.06, 0.05, 0.04, 0.06, 0.05, 0.05, 0.02, 0.07, 0.05, 0.06, 0.06, 0.06, 0.06, 0.05, 0.05, 0.05, 0.04, 0.06, 0.03]
        # SMC central coords stored in degrees.
        c_LMC = SkyCoord('05h20m57s', '-69d28m41s', frame='icrs')
        d_LMC = Distance((10**(0.2*(18.49 + 5))/1000.), unit=u.kpc)
        D_0, gal_cent = d_LMC, c_LMC
        glx_inc, glx_PA = Angle('25.d'), Angle('162.d')
        theta = glx_PA + Angle('90d')

    plot_bulge_plane(ra_g, dec_g, dm, e_dm, D_0, gal_cent, glx_inc, theta)
